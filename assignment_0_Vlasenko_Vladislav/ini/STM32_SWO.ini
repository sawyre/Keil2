/***************************************************************************************************
                                Отладочный скрипт для Кейла для процов stm32f1xx
 Автор     : Хазанский Р.Р.
 Кр. ср.   : Функция для отладчика, которые выключают вотчдоги, таймеры и прочее, когда вы нажимаете
             "стоп" во время отладки. Функция, которая останавливает отладчик при попадании в 
             эксепшоны.
 Замечания : -

***************************************************************************************************/

// <<< Use Configuration Wizard in Context Menu >>>

// Эта функция останавливает периферию при нажатии на "стоп"
// составлено вручную по описанию регистра DBGMCU_CR
FUNC void DebugSetup (void) {
// <h> Debug MCU Configuration
//   <o1.0>    DBG_SLEEP     <i> Debug Sleep Mode
//   <o1.1>    DBG_STOP      <i> Debug Stop Mode
//   <o1.2>    DBG_STANDBY   <i> Debug Standby Mode
//   <o1.5>    TRACE_IOEN    <i> Trace I/O Enable 
//   <o1.6..7> TRACE_MODE    <i> Trace Mode
//             <0=> Asynchronous
//             <1=> Synchronous: TRACEDATA Size 1
//             <2=> Synchronous: TRACEDATA Size 2
//             <3=> Synchronous: TRACEDATA Size 4
//   <o1.8>    IWDG_STOP <i> Independant Watchdog Stopped when Core is halted
//   <o1.9>    WWDG_STOP <i> Window Watchdog Stopped when Core is halted
//   <o1.10>   TIM1_STOP <i> Timer 1 Stopped when Core is halted
//   <o1.11>   TIM2_STOP <i> Timer 2 Stopped when Core is halted
//   <o1.12>   TIM3_STOP <i> Timer 3 Stopped when Core is halted
//   <o1.13>   TIM4_STOP <i> Timer 4 Stopped when Core is halted
//   <o1.18>   TIM5_STOP <i> Timer 5 Stopped when Core is halted
//   <o1.19>   TIM6_STOP <i> Timer 6 Stopped when Core is halted
//   <o1.20>   TIM7_STOP <i> Timer 7 Stopped when Core is halted
//   <o1.17>   TIM8_STOP <i> Timer 8 Stopped when Core is halted
//   <o1.28>   TIM9_STOP <i> Timer 9 Stopped when Core is halted
//   <o1.29>   TIM10_STOP <i> Timer 10 Stopped when Core is halted
//   <o1.30>   TIM11_STOP <i> Timer 11 Stopped when Core is halted
//   <o1.25>   TIM12_STOP <i> Timer 12 Stopped when Core is halted
//   <o1.26>   TIM13_STOP <i> Timer 13 Stopped when Core is halted
//   <o1.27>   TIM14_STOP <i> Timer 14 Stopped when Core is halted
//   <o1.14>   CAN1_STOP  <i> CAN 1 Stopped when Core is halted
//   <o1.15>   I2C1_STOP  <i> I2C1 SMBUS Timeout is frozen when Core is halted
//   <o1.16>   I2C2_STOP  <i> I2C2 SMBUS Timeout is frozen when Core is halted
//   <o1.21>   CAN2_STOP  <i> CAN21 Stopped when Core is halted
// </h>
  _WDWORD(0xE0042004, 0x7E1E3F07);  // DBGMCU_CR
}

DebugSetup();                       

// эта функция ловит прерывания по исключительным ситуациям
FUNC void VectorCatchSetup (void) {
  unsigned int val;
 
// <h> Debug Exception and Monitor Control Register
//   <i> This register manages exception behavior under debug.
//   <i> Vector catching is only available to halting debug. The upper halfword is for monitor controls and the lower halfword is for halting exception support.This register is not reset on a system reset.
//   <o2. 0>    VC_CORERESET <i> Reset Vector Catch. Halt running system if Core reset occurs.
//   <o2. 4>    VC_MMERR     <i> Debug trap on Memory Management faults.
//   <o2. 5>    VC_NOCPERR   <i> Debug trap on Usage Fault access to Coprocessor which is not present or marked as not present in CAR register.
//   <o2. 6>    VC_CHKERR    <i> Debug trap on Usage Fault enabled checking errors.
//   <o2. 7>    VC_STATERR   <i> Debug trap on Usage Fault state errors.
//   <o2. 8>    VC_BUSERR    <i> Debug Trap on normal Bus error.
//   <o2. 9>    VC_INTERR    <i> Debug Trap on interrupt/exception service errors. These are a subset of other faults and catches before BUSERR or HARDERR.
//   <o2.10>    VC_HARDERR   <i> Debug trap on Hard Fault.
// </h>
 
  val  = _RDWORD(0xE000EDFC);
  val &= ~(0x07F1);
  val |=  (0x07F0);
   
   // пока вроде никому не надо, но пусть будет
//  printf("Vector Catch enabled: ");
//  if(val & (1<< 0)) printf("VC_CORERESET, ");
//  if(val & (1<< 4)) printf("VC_MMERR, ");
//  if(val & (1<< 5)) printf("VC_NOCPERR, ");
//  if(val & (1<< 6)) printf("VC_CHKERR, ");
//  if(val & (1<< 7)) printf("VC_STATERR, ");
//  if(val & (1<< 8)) printf("VC_BUSERR, ");
//  if(val & (1<< 9)) printf("VC_INTERR, ");
//  if(val & (1<<10)) printf("VC_HARDERR, ");
//  printf("\n");  
 
  _WDWORD(0xE000EDFC, val);
}
 
 
VectorCatchSetup();